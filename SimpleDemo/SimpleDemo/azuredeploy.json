{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "simpledemostoreType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "vmNamePrefix": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "TspDemo"
    },
    "vmCount": {
      "type": "int",
      "minValue": 1,
      "maxValue": 8
    },
    "adminUser": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "labadmin"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "provisionType":{
      "type":"string",
      "allowedValues": [
        "server",
        "client"
      ]
    },
    "serverOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "Windows-Server-Technical-Preview"
      ]
    },
    "clientOS":{
      "type":"string",
      "defaultValue":"Windows-10-N-x64",
      "allowedValues": [
        "Windows-10-N-x64",
        "Win81-Ent-N-x64",
        "Win7-SP1-Ent-N-x64"
      ]
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Basic_A2",
      "allowedValues": [
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ]
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/dmcwee/azure/master/Scripts/DSC/ADDSC.zip"
    },
    "_artifactFileName": {
      "type": "string",
      "defaultValue": "DCPrep.ps1"
    }
  },
  "variables": {
    //Storage Account Variables
    "tempstoreName": "[toLower(concat(resourceGroup().name, uniqueString(resourceGroup().id)))]",
    "simpledemostoreNameLength": "[min(24, length(variables('tempstoreName')))]",
    "simpledemostoreName": "[substring(variables('tempstoreName'), 0, variables('simpledemostoreNameLength'))]",

    "client":{
      "imageProvider":"MicrosoftVisualStudio",
      "imageOffer":"Windows",
      "imageSku": "parameters('clientOS')"
    },
    "server":{
      "imageProvider":"MicrosoftWindowsServer",
      "imageOffer":"WindowsServer",
      "imageSku": "parameters('serverOSVersion')"
    },

    //Network Variables
    "simpledemonetName": "simpledemonet",
    "simpledemonetPrefix": "10.0.0.0/16",
    "simpledemonetSubnet1Name": "Subnet-1",
    "simpledemonetSubnet1Prefix": "10.0.0.0/24",
    "simpledemodcVnetID": "[resourceId('Microsoft.Network/virtualNetworks', 'simpledemonet')]",
    "simpledemodcSubnetRef": "[concat(variables('simpledemodcVnetID'), '/subnets/', variables('simpledemonetSubnet1Name'))]",
    "simpledemoGatewaySubnetName": "GatewaySubnet",

    //VM Variables
    "simpledemodcStorageAccountContainerName": "vhds",

    "vmInfo": "[variables(parameters('provisionType'))]"
  },
  "resources": [
    /*
    Create the Storage Account for the demo
    */
    {
      "name": "[variables('simpledemostoreName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[parameters('simpledemostoreType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "simpledemostore"
      },
      "kind": "Storage"
    },

    /*
    Create the virtual network and subnet
    */
    {
      "name": "[variables('simpledemonetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "simpledemonet"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('simpledemonetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('simpledemonetSubnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('simpledemonetSubnet1Prefix')]"
            }
          },
          {
            "name": "[variables('simpledemoGatewaySubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24"
            }
          }
        ]
      }
    },

    /*
    Create Public IP objects for each VM
    */
    {
      "copy": {
        "name": "CorpNetPublicIPs",
        "count": "[parameters('vmCount')]"
      },
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmNamePrefix'), copyIndex(), '-pip')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4
      },
      "resources": [],
      "dependsOn": []
    },

    /*
    Create the NICs for each VM
    */
    {
      "copy": {
        "name": "NicCreationCounter",
        "count": "[parameters('vmCount')]"
      },
      "name": "[concat(parameters('vmNamePrefix'), copyIndex(), '-nic')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'simpledemonet')]"
      ],
      "tags": {
        "displayName": "simpledemodcNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmNamePrefix'), copyIndex(), '-pip'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.0.0.', copyIndex(10))]",
              "subnet": {
                "id": "[variables('simpledemodcSubnetRef')]"
              }
            }
          }
        ]
      }
    },

    /*
    Create the VMs
    */
    {
      "copy": {
        "name": "simpledemovmCounter",
        "count": "[parameters('vmCount')]"
      },
      "name": "[concat(parameters('vmNamePrefix'), '-', copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('simpledemostoreName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmNamePrefix'), copyIndex(), '-nic'))]"
      ],
      "tags": {
        "displayName": "VMx"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'), '-', copyIndex())]",
          "adminUsername": "[parameters('adminUser')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmInfo').imageProvider]",
            "offer": "[variables('vmInfo').imageOffer]",
            "sku": "[variables('vmInfo').imageSku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(), '-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('simpledemostoreName')), '2016-01-01').primaryEndpoints.blob, variables('simpledemodcStorageAccountContainerName'), '/', parameters('vmNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmNamePrefix'), copyIndex(), '-nic'))]"
            }
          ]
        }
      },
      "resources": [ ]
    }
  ],
  "outputs": {}
}
